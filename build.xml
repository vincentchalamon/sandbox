<?xml version="1.0" encoding="UTF-8"?>

<project name="Lazyprojet" default="build">
    <property name="sourcedir" value="${basedir}/src"/>
    <property name="builddir" value="${basedir}/build"/>
    <property name="composer.path" value="${basedir}/composer.phar"/>
    <available property="composer.exists" file="${composer.path}"/>

    <target name="build" depends="prepare,vendors,lint,phploc,pdepend,phpcpd,phpmd-ci,phpcs-ci,phpdoc,phpunit,phpcb"/>

    <target name="build-parallel" depends="prepare,lint,tools-parallel,phpunit,phpcb"/>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc"/>
            <antcall target="phpdoc"/>
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="${builddir}/api"/>
        <delete dir="${builddir}/code-browser"/>
        <delete dir="${builddir}/coverage"/>
        <delete dir="${builddir}/logs"/>
        <delete dir="${builddir}/pdepend"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="${builddir}/api"/>
        <mkdir dir="${builddir}/code-browser"/>
        <mkdir dir="${builddir}/coverage"/>
        <mkdir dir="${builddir}/logs"/>
        <mkdir dir="${builddir}/pdepend"/>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l"/>
            <fileset dir="${sourcedir}">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
            <fileset dir="${basedir}/src/">
                <include name="**/*Test.php"/>
                <modified/>
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="phploc">
            <arg value="--log-csv"/>
            <arg value="${builddir}/logs/phploc.csv"/>
            <arg path="${sourcedir}"/>
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="pdepend">
            <arg value="--jdepend-xml=${builddir}/logs/jdepend.xml"/>
            <arg value="--jdepend-chart=${builddir}/pdepend/dependencies.svg"/>
            <arg value="--overview-pyramid=${builddir}/pdepend/overview-pyramid.svg"/>
            <arg path="${sourcedir}"/>
        </exec>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpmd">
            <arg path="${basedir}/src"/>
            <arg value="text"/>
            <arg value="${basedir}/app/phpmd.xml"/>
        </exec>
    </target>

    <target name="phpmd-ci"
            description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="phpmd">
            <arg path="${sourcedir}"/>
            <arg value="xml"/>
            <arg value="${basedir}/app/phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg value="${builddir}/logs/pmd.xml"/>
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpcs">
            <arg value="--standard=Symfony2"/>
            <arg path="${sourcedir}"/>
        </exec>
    </target>

    <target name="phpcs-ci"
            description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="phpcs" output="/dev/null">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${builddir}/logs/checkstyle.xml"/>
            <arg value="--standard=Symfony2"/>
            <arg path="${sourcedir}"/>
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="phpcpd">
            <arg value="--log-pmd"/>
            <arg value="${builddir}/logs/pmd-cpd.xml"/>
            <arg path="${sourcedir}"/>
        </exec>
    </target>

    <target name="phpdoc" description="Generate API documentation using phpDoc">
        <exec executable="phpdoc">
            <arg line="-d '${sourcedir}' -t '${builddir}/api' --template=responsive --title='Sandbox'"/>
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="phpunit" failonerror="true">
            <arg value="-c"/>
            <arg path="${basedir}/app/phpunit.xml.dist"/>
        </exec>
    </target>

    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="phpcb">
            <arg value="--log"/>
            <arg path="${builddir}/logs"/>
            <arg value="--source"/>
            <arg path="${sourcedir}"/>
            <arg value="--output"/>
            <arg path="${builddir}/code-browser"/>
        </exec>
    </target>

    <target name="composer" unless="composer.exists">
        <exec executable="curl">
            <arg line="-sS https://getcomposer.org/installer | php"/>
        </exec>
        <exec executable="chmod">
            <arg value="755"/>
            <arg path="${composer.path}"/>
        </exec>
    </target>

    <target name="vendors" depends="composer" description="Install vendors">
        <exec executable="php" failonerror="true">
            <arg path="${composer.path}"/>
            <arg value="self-update"/>
        </exec>
        <exec executable="${composer.path}" failonerror="true">
            <arg value="install"/>
            <arg value="--no-scripts"/>
            <arg value="--verbose"/>
            <arg value="--prefer-dist"/>
            <arg value="--optimize-autoloader"/>
        </exec>
    </target>

</project>